%YAML 1.2
---

# http://www.sublimetext.com/docs/3/syntax.html
name: Target Language Compiler
file_extensions:
  - tlc
scope: source.tlc

variables:
  # Valid variables (and function) names must start with a letter
  validNames: '[A-Za-z]\w+'


contexts:
  main:
    - include: comments
    - include: strings
    - include: keywords
    - include: language
    - include: operators
    - include: numbers

  # In TLC, comments are always single line, and start with %%
  comments:
    - match: '(%%).*$\n?'
      scope: comment.line.tlc
      captures:
        1: punctuation.definition.comment.tlc


  # ------------------------------------------------------------
  # Keywords context. All keywords should start with '%'

  keywords:
    # Function declaration
    - match: '(%)(function\b)\s*({{validNames}})(?=\s*\()'
      scope: meta.function.tlc
      captures:
        1: keyword.control.tlc punctuation.definition.keyword.tlc
        2: keyword.control.tlc
        3: entity.name.function.tlc
      push:
        - meta_scope: meta.function.tlc
        - match: '\('
          scope: punctuation.definition.parameters.begin.tlc
          push:
            - match: '({{validNames}})\s*(,)?'
              captures:
                1: variable.parameter.tlc
                2: punctuation.separator.tlc
            - match: '\)'
              scope: punctuation.definition.parameters.end.tlc
              pop: true
        - match: '\b(void|Output)\b'
          scope: storage.type.tlc
        - match: '\n'
          pop: true

    # Any other keyword
    - match: '(%)(\w+)\b'
      scope: keyword.control.tlc
      captures:
        1: punctuation.definition.keyword.tlc


  # ------------------------------------------------------------
  # "Section" contexts, for strings "" and alike

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.tlc
      push:
        - meta_scope: string.quoted.double.tlc
        - match: '\\.'
          scope: constant.character.escape.tlc
        - match: '"'
          scope: punctuation.definition.string.end.tlc
          pop: true


  # ------------------------------------------------------------
  # Language built-ins, such as functions and constants

  language:
    - match: 'TLC_(TRUE|FALSE)'
      scope: constant.language.boolean.tlc


  # ------------------------------------------------------------
  # Miscellanous contexts

  operators:
    - match: '(!|&&|\|\|)'
      scope: keyword.operator.logical.tlc
    - match: '((<|>)=?|==|!=)'
      scope: keyword.operator.comparison.tlc
    - match: '='
      scope: keyword.operator.assignment.tlc
    - match: '(\+|\*|-|\\)'
      scope: keyword.operator.arithmetic.tlc

  numbers:
    - match: '(-?)\d*\.\d+'
      scope: constant.numeric.float.tlc
      captures:
        1: keyword.operator.assignment.tlc
    - match: '(-?)\d+'
      scope: constant.numeric.integer.tlc
      captures:
        1: keyword.operator.assignment.tlc
