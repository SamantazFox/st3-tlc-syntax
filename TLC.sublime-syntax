%YAML 1.2
---

# http://www.sublimetext.com/docs/3/syntax.html
name: Target Language Compiler
file_extensions:
  - tlc
scope: source.tlc

variables:
  # Valid variables (and function) names must start with a letter
  validNames: '[A-Za-z]\w+'


contexts:
  main:
    - match: '(?:^\s*)(%)(?=\w)'
      scope: keyword.control.tlc
      captures:
        1: punctuation.definition.keyword.tlc
      push: keywords

    - include: comments
    - include: strings
    - include: language
    - include: operators
    - include: numbers
    - include: line-continuation
    - include: function-call


  # In TLC, comments are always single line, and start with %%
  comments:
    - match: '(%%).*$\n?'
      scope: comment.line.tlc
      captures:
        1: punctuation.definition.comment.tlc


  # ------------------------------------------------------------
  # Keywords context. All keywords should start with '%'

  keywords:
    # Function declaration
    - match: '(function)\b\s*({{validNames}})(?=\s*\()'
      captures:
        1: keyword.control.tlc
        2: entity.name.function.tlc
      set:
        - meta_scope: meta.function.tlc
        - match: '\('
          scope: punctuation.definition.parameters.begin.tlc
          push:
            - match: '({{validNames}})\s*(,)?'
              captures:
                1: variable.parameter.tlc
                2: punctuation.separator.tlc
            - match: '\)'
              scope: punctuation.definition.parameters.end.tlc
              pop: true
        - match: '\b(void|Output)\b'
          scope: storage.type.tlc
        - match: '\n'
          pop: true

    # if/elseif/else/endif
    - match: '((else|end)?if|else)\b'
      scope: keyword.control.conditional.tlc
      pop: true

    # switch/case
    - match: '((end)?switch|case|break|default)\b'
      scope: keyword.control.conditionnal.tlc
      pop: true

    # error/warning/trace/exit (meant for debugging)
    - match: '(?<=%)(error|warning|trace|exit)\b'
      scope: support.function.debug.tlc
      pop: true

    # Any other keyword
    - match: '(\w+)\b'
      scope: keyword.control.tlc
      pop: true


  # ------------------------------------------------------------
  # "Section" contexts, for strings "" and alike

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.tlc
      push:
        - meta_scope: string.quoted.double.tlc
        - match: '\\.'
          scope: constant.character.escape.tlc
        - match: '"'
          scope: punctuation.definition.string.end.tlc
          pop: true


  # ------------------------------------------------------------
  # Language built-ins, such as functions and constants

  language:
    # Boolean constants
    - match: '\b(TLC_(TRUE|FALSE))\b'
      scope: constant.language.boolean.tlc

    # Integer constants and numeric functions
    - match: '\b(INT(8|16|32)?(MIN|MAX))\b'
      scope: constant.language.integer.signed.tlc
    - match: '\b(UINT(8|16|32)?MAX)\b'
      scope: constant.language.integer.unsigned.tlc
    - match: '\b(FORMAT|IMAG|REAL)\b'
      scope: support.function.numeric.tlc

    # File operation functions and constants
    - match: '\b(NULL_FILE|STDOUT)\b'
      scope: constant.language.files.tlc
    - match: '\b(FILE_EXISTS)\b'
      scope: support.function.files.tlc

    # Record fields operation built-in functions
    - match: '\b(FIELDNAMES|(GET|SET|REMOVE)FIELD)\b'
      scope: support.function.fields.tlc

    # Generate* built-in functions
    - match: '\b(GENERATE(_(FILENAME|FORMATTED_VALUE|FUNCTION_EXISTS|TYPE(_FUNCTION_EXISTS)?))?)\b'
      scope: support.function.generate.tlc

    # Is* comparison built-in functions
    - match: '\b(IS(ALIAS|EQUAL|EMPTY|FIELD|INF|NAN|FINITE|SLPRMREF|))\b'
      scope: support.function.is-comparison.tlc

    # String operation built-in functions
    - match: '\b(SPRINTF|STRING(OF)?|SYSNAME|WHITE_SPACE)\b'
      scope: support.function.strings.tlc

    # Miscellanous TLC constants and functions
    - match: '\b(NUMTLCFILES|OUTPUT_LINES|TLC(FILES|_TIME|_VERSION))\b'
      scope: constant.language.other.tlc
    - match: '\b(CAST|EXISTS|FEVAL|GET_COMMAND_SWITCH|IDNUM|ROLL_ITERATIONS|SIZE|TYPE|WILL_ROLL)\b'
      scope: support.function.other.tlc


  # ------------------------------------------------------------
  # Miscellanous contexts

  operators:
    - match: '(!|&&|\|\|)'
      scope: keyword.operator.logical.tlc
    - match: '((<|>)=?|==|!=)'
      scope: keyword.operator.comparison.tlc
    - match: '='
      scope: keyword.operator.assignment.tlc
    - match: '(\+|\*|-|\\(?!\s*\n))'
      scope: keyword.operator.arithmetic.tlc

  numbers:
    # NB: Don't match digits if an alpha charater preceeds it
    - match: '(?<=\W)(-?)\d*\.\d+'
      scope: constant.numeric.float.tlc
      captures:
        1: keyword.operator.assignment.tlc
    - match: '(?<=\W)(-?)\d+'
      scope: constant.numeric.integer.tlc
      captures:
        1: keyword.operator.assignment.tlc

  line-continuation:
    # Match '...' or '\' at end of line
    - match: '(\.\.\.|\\)\s*$\n?'
      scope: punctuation.separator.continuation.tlc

  function-call:
    - match: '({{validNames}})\('
      captures:
        1: variable.function.tlc
      push:
        - meta_scope: meta.function-call.tlc
        - include: strings
        - include: function-call
        - include: line-continuation
        - match: '\)'
          pop: true
